/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserService } from "../user.service";
import { UserCreateInput } from "./UserCreateInput";
import { User } from "./User";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserUpdateInput } from "./UserUpdateInput";

export class UserControllerBase {
  constructor(protected readonly service: UserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  async createUser(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.createUser({
      data: data,
      select: {
        active: true,
        address: true,
        addresses: true,
        appointmentsTotal: true,
        cardId: true,
        cash: true,
        cheque: true,
        city: true,
        clientId: true,
        cnpj: true,
        complement: true,
        confirmedEmail: true,
        coord: true,
        cpf: true,
        createdAt: true,
        createdById: true,
        creditcard: true,
        debitcard: true,
        distance: true,
        email: true,
        globalId: true,
        id: true,
        myOwnerId: true,
        name: true,
        nextPlan: true,
        ownerId: true,
        password: true,
        payDay: true,
        phone: true,
        photoId: true,
        photoUrl: true,
        pix: true,
        plan: true,
        role: true,
        sendedEmail: true,
        serviceIds: true,
        serviceOptions: true,
        transferbank: true,
        uf: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  async users(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.users({
      ...args,
      select: {
        active: true,
        address: true,
        addresses: true,
        appointmentsTotal: true,
        cardId: true,
        cash: true,
        cheque: true,
        city: true,
        clientId: true,
        cnpj: true,
        complement: true,
        confirmedEmail: true,
        coord: true,
        cpf: true,
        createdAt: true,
        createdById: true,
        creditcard: true,
        debitcard: true,
        distance: true,
        email: true,
        globalId: true,
        id: true,
        myOwnerId: true,
        name: true,
        nextPlan: true,
        ownerId: true,
        password: true,
        payDay: true,
        phone: true,
        photoId: true,
        photoUrl: true,
        pix: true,
        plan: true,
        role: true,
        sendedEmail: true,
        serviceIds: true,
        serviceOptions: true,
        transferbank: true,
        uf: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async user(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.user({
      where: params,
      select: {
        active: true,
        address: true,
        addresses: true,
        appointmentsTotal: true,
        cardId: true,
        cash: true,
        cheque: true,
        city: true,
        clientId: true,
        cnpj: true,
        complement: true,
        confirmedEmail: true,
        coord: true,
        cpf: true,
        createdAt: true,
        createdById: true,
        creditcard: true,
        debitcard: true,
        distance: true,
        email: true,
        globalId: true,
        id: true,
        myOwnerId: true,
        name: true,
        nextPlan: true,
        ownerId: true,
        password: true,
        payDay: true,
        phone: true,
        photoId: true,
        photoUrl: true,
        pix: true,
        plan: true,
        role: true,
        sendedEmail: true,
        serviceIds: true,
        serviceOptions: true,
        transferbank: true,
        uf: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.updateUser({
        where: params,
        data: data,
        select: {
          active: true,
          address: true,
          addresses: true,
          appointmentsTotal: true,
          cardId: true,
          cash: true,
          cheque: true,
          city: true,
          clientId: true,
          cnpj: true,
          complement: true,
          confirmedEmail: true,
          coord: true,
          cpf: true,
          createdAt: true,
          createdById: true,
          creditcard: true,
          debitcard: true,
          distance: true,
          email: true,
          globalId: true,
          id: true,
          myOwnerId: true,
          name: true,
          nextPlan: true,
          ownerId: true,
          password: true,
          payDay: true,
          phone: true,
          photoId: true,
          photoUrl: true,
          pix: true,
          plan: true,
          role: true,
          sendedEmail: true,
          serviceIds: true,
          serviceOptions: true,
          transferbank: true,
          uf: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUser(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.deleteUser({
        where: params,
        select: {
          active: true,
          address: true,
          addresses: true,
          appointmentsTotal: true,
          cardId: true,
          cash: true,
          cheque: true,
          city: true,
          clientId: true,
          cnpj: true,
          complement: true,
          confirmedEmail: true,
          coord: true,
          cpf: true,
          createdAt: true,
          createdById: true,
          creditcard: true,
          debitcard: true,
          distance: true,
          email: true,
          globalId: true,
          id: true,
          myOwnerId: true,
          name: true,
          nextPlan: true,
          ownerId: true,
          password: true,
          payDay: true,
          phone: true,
          photoId: true,
          photoUrl: true,
          pix: true,
          plan: true,
          role: true,
          sendedEmail: true,
          serviceIds: true,
          serviceOptions: true,
          transferbank: true,
          uf: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
