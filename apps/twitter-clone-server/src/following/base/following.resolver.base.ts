/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Following } from "./Following";
import { FollowingCountArgs } from "./FollowingCountArgs";
import { FollowingFindManyArgs } from "./FollowingFindManyArgs";
import { FollowingFindUniqueArgs } from "./FollowingFindUniqueArgs";
import { CreateFollowingArgs } from "./CreateFollowingArgs";
import { UpdateFollowingArgs } from "./UpdateFollowingArgs";
import { DeleteFollowingArgs } from "./DeleteFollowingArgs";
import { FollowingService } from "../following.service";
@graphql.Resolver(() => Following)
export class FollowingResolverBase {
  constructor(protected readonly service: FollowingService) {}

  async _followingsMeta(
    @graphql.Args() args: FollowingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Following])
  async followings(
    @graphql.Args() args: FollowingFindManyArgs
  ): Promise<Following[]> {
    return this.service.followings(args);
  }

  @graphql.Query(() => Following, { nullable: true })
  async following(
    @graphql.Args() args: FollowingFindUniqueArgs
  ): Promise<Following | null> {
    const result = await this.service.following(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Following)
  async createFollowing(
    @graphql.Args() args: CreateFollowingArgs
  ): Promise<Following> {
    return await this.service.createFollowing({
      ...args,
      data: {
        ...args.data,

        following: args.data.following
          ? {
              connect: args.data.following,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Following)
  async updateFollowing(
    @graphql.Args() args: UpdateFollowingArgs
  ): Promise<Following | null> {
    try {
      return await this.service.updateFollowing({
        ...args,
        data: {
          ...args.data,

          following: args.data.following
            ? {
                connect: args.data.following,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Following)
  async deleteFollowing(
    @graphql.Args() args: DeleteFollowingArgs
  ): Promise<Following | null> {
    try {
      return await this.service.deleteFollowing(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Following], { name: "followings" })
  async findFollowings(
    @graphql.Parent() parent: Following,
    @graphql.Args() args: FollowingFindManyArgs
  ): Promise<Following[]> {
    const results = await this.service.findFollowings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Following, {
    nullable: true,
    name: "following",
  })
  async getFollowing(
    @graphql.Parent() parent: Following
  ): Promise<Following | null> {
    const result = await this.service.getFollowing(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
