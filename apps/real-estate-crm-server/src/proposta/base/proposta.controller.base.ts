/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PropostaService } from "../proposta.service";
import { PropostaCreateInput } from "./PropostaCreateInput";
import { Proposta } from "./Proposta";
import { PropostaFindManyArgs } from "./PropostaFindManyArgs";
import { PropostaWhereUniqueInput } from "./PropostaWhereUniqueInput";
import { PropostaUpdateInput } from "./PropostaUpdateInput";

export class PropostaControllerBase {
  constructor(protected readonly service: PropostaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Proposta })
  async createProposta(
    @common.Body() data: PropostaCreateInput
  ): Promise<Proposta> {
    return await this.service.createProposta({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Proposta] })
  @ApiNestedQuery(PropostaFindManyArgs)
  async propostas(@common.Req() request: Request): Promise<Proposta[]> {
    const args = plainToClass(PropostaFindManyArgs, request.query);
    return this.service.propostas({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Proposta })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async proposta(
    @common.Param() params: PropostaWhereUniqueInput
  ): Promise<Proposta | null> {
    const result = await this.service.proposta({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Proposta })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProposta(
    @common.Param() params: PropostaWhereUniqueInput,
    @common.Body() data: PropostaUpdateInput
  ): Promise<Proposta | null> {
    try {
      return await this.service.updateProposta({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Proposta })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProposta(
    @common.Param() params: PropostaWhereUniqueInput
  ): Promise<Proposta | null> {
    try {
      return await this.service.deleteProposta({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
