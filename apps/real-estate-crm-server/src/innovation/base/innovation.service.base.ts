/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Innovation as PrismaInnovation } from "@prisma/client";

export class InnovationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InnovationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.innovation.count(args);
  }

  async innovations<T extends Prisma.InnovationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InnovationFindManyArgs>
  ): Promise<PrismaInnovation[]> {
    return this.prisma.innovation.findMany<Prisma.InnovationFindManyArgs>(args);
  }
  async innovation<T extends Prisma.InnovationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.InnovationFindUniqueArgs>
  ): Promise<PrismaInnovation | null> {
    return this.prisma.innovation.findUnique(args);
  }
  async createInnovation<T extends Prisma.InnovationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InnovationCreateArgs>
  ): Promise<PrismaInnovation> {
    return this.prisma.innovation.create<T>(args);
  }
  async updateInnovation<T extends Prisma.InnovationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InnovationUpdateArgs>
  ): Promise<PrismaInnovation> {
    return this.prisma.innovation.update<T>(args);
  }
  async deleteInnovation<T extends Prisma.InnovationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.InnovationDeleteArgs>
  ): Promise<PrismaInnovation> {
    return this.prisma.innovation.delete(args);
  }
}
