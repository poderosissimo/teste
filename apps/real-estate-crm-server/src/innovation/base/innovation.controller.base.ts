/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InnovationService } from "../innovation.service";
import { InnovationCreateInput } from "./InnovationCreateInput";
import { Innovation } from "./Innovation";
import { InnovationFindManyArgs } from "./InnovationFindManyArgs";
import { InnovationWhereUniqueInput } from "./InnovationWhereUniqueInput";
import { InnovationUpdateInput } from "./InnovationUpdateInput";

export class InnovationControllerBase {
  constructor(protected readonly service: InnovationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Innovation })
  async createInnovation(
    @common.Body() data: InnovationCreateInput
  ): Promise<Innovation> {
    return await this.service.createInnovation({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Innovation] })
  @ApiNestedQuery(InnovationFindManyArgs)
  async innovations(@common.Req() request: Request): Promise<Innovation[]> {
    const args = plainToClass(InnovationFindManyArgs, request.query);
    return this.service.innovations({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Innovation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async innovation(
    @common.Param() params: InnovationWhereUniqueInput
  ): Promise<Innovation | null> {
    const result = await this.service.innovation({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Innovation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInnovation(
    @common.Param() params: InnovationWhereUniqueInput,
    @common.Body() data: InnovationUpdateInput
  ): Promise<Innovation | null> {
    try {
      return await this.service.updateInnovation({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Innovation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInnovation(
    @common.Param() params: InnovationWhereUniqueInput
  ): Promise<Innovation | null> {
    try {
      return await this.service.deleteInnovation({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
