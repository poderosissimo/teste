/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, LeadCadastro as PrismaLeadCadastro } from "@prisma/client";

export class LeadCadastroServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LeadCadastroCountArgs, "select">
  ): Promise<number> {
    return this.prisma.leadCadastro.count(args);
  }

  async leadCadastros<T extends Prisma.LeadCadastroFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadCadastroFindManyArgs>
  ): Promise<PrismaLeadCadastro[]> {
    return this.prisma.leadCadastro.findMany<Prisma.LeadCadastroFindManyArgs>(
      args
    );
  }
  async leadCadastro<T extends Prisma.LeadCadastroFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadCadastroFindUniqueArgs>
  ): Promise<PrismaLeadCadastro | null> {
    return this.prisma.leadCadastro.findUnique(args);
  }
  async createLeadCadastro<T extends Prisma.LeadCadastroCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadCadastroCreateArgs>
  ): Promise<PrismaLeadCadastro> {
    return this.prisma.leadCadastro.create<T>(args);
  }
  async updateLeadCadastro<T extends Prisma.LeadCadastroUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadCadastroUpdateArgs>
  ): Promise<PrismaLeadCadastro> {
    return this.prisma.leadCadastro.update<T>(args);
  }
  async deleteLeadCadastro<T extends Prisma.LeadCadastroDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadCadastroDeleteArgs>
  ): Promise<PrismaLeadCadastro> {
    return this.prisma.leadCadastro.delete(args);
  }
}
