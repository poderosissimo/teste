/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LeadCadastro } from "./LeadCadastro";
import { LeadCadastroCountArgs } from "./LeadCadastroCountArgs";
import { LeadCadastroFindManyArgs } from "./LeadCadastroFindManyArgs";
import { LeadCadastroFindUniqueArgs } from "./LeadCadastroFindUniqueArgs";
import { CreateLeadCadastroArgs } from "./CreateLeadCadastroArgs";
import { UpdateLeadCadastroArgs } from "./UpdateLeadCadastroArgs";
import { DeleteLeadCadastroArgs } from "./DeleteLeadCadastroArgs";
import { LeadCadastroService } from "../leadCadastro.service";
@graphql.Resolver(() => LeadCadastro)
export class LeadCadastroResolverBase {
  constructor(protected readonly service: LeadCadastroService) {}

  async _leadCadastrosMeta(
    @graphql.Args() args: LeadCadastroCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LeadCadastro])
  async leadCadastros(
    @graphql.Args() args: LeadCadastroFindManyArgs
  ): Promise<LeadCadastro[]> {
    return this.service.leadCadastros(args);
  }

  @graphql.Query(() => LeadCadastro, { nullable: true })
  async leadCadastro(
    @graphql.Args() args: LeadCadastroFindUniqueArgs
  ): Promise<LeadCadastro | null> {
    const result = await this.service.leadCadastro(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LeadCadastro)
  async createLeadCadastro(
    @graphql.Args() args: CreateLeadCadastroArgs
  ): Promise<LeadCadastro> {
    return await this.service.createLeadCadastro({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LeadCadastro)
  async updateLeadCadastro(
    @graphql.Args() args: UpdateLeadCadastroArgs
  ): Promise<LeadCadastro | null> {
    try {
      return await this.service.updateLeadCadastro({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LeadCadastro)
  async deleteLeadCadastro(
    @graphql.Args() args: DeleteLeadCadastroArgs
  ): Promise<LeadCadastro | null> {
    try {
      return await this.service.deleteLeadCadastro(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
