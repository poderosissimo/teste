/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Lead } from "./Lead";
import { LeadCountArgs } from "./LeadCountArgs";
import { LeadFindManyArgs } from "./LeadFindManyArgs";
import { LeadFindUniqueArgs } from "./LeadFindUniqueArgs";
import { CreateLeadArgs } from "./CreateLeadArgs";
import { UpdateLeadArgs } from "./UpdateLeadArgs";
import { DeleteLeadArgs } from "./DeleteLeadArgs";
import { LeadService } from "../lead.service";
@graphql.Resolver(() => Lead)
export class LeadResolverBase {
  constructor(protected readonly service: LeadService) {}

  async _leadsMeta(
    @graphql.Args() args: LeadCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Lead])
  async leads(@graphql.Args() args: LeadFindManyArgs): Promise<Lead[]> {
    return this.service.leads(args);
  }

  @graphql.Query(() => Lead, { nullable: true })
  async lead(@graphql.Args() args: LeadFindUniqueArgs): Promise<Lead | null> {
    const result = await this.service.lead(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Lead)
  async createLead(@graphql.Args() args: CreateLeadArgs): Promise<Lead> {
    return await this.service.createLead({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Lead)
  async updateLead(@graphql.Args() args: UpdateLeadArgs): Promise<Lead | null> {
    try {
      return await this.service.updateLead({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Lead)
  async deleteLead(@graphql.Args() args: DeleteLeadArgs): Promise<Lead | null> {
    try {
      return await this.service.deleteLead(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
