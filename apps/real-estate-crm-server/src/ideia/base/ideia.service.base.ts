/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Ideia as PrismaIdeia } from "@prisma/client";

export class IdeiaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.IdeiaCountArgs, "select">): Promise<number> {
    return this.prisma.ideia.count(args);
  }

  async ideias<T extends Prisma.IdeiaFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.IdeiaFindManyArgs>
  ): Promise<PrismaIdeia[]> {
    return this.prisma.ideia.findMany<Prisma.IdeiaFindManyArgs>(args);
  }
  async ideia<T extends Prisma.IdeiaFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.IdeiaFindUniqueArgs>
  ): Promise<PrismaIdeia | null> {
    return this.prisma.ideia.findUnique(args);
  }
  async createIdeia<T extends Prisma.IdeiaCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.IdeiaCreateArgs>
  ): Promise<PrismaIdeia> {
    return this.prisma.ideia.create<T>(args);
  }
  async updateIdeia<T extends Prisma.IdeiaUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.IdeiaUpdateArgs>
  ): Promise<PrismaIdeia> {
    return this.prisma.ideia.update<T>(args);
  }
  async deleteIdeia<T extends Prisma.IdeiaDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.IdeiaDeleteArgs>
  ): Promise<PrismaIdeia> {
    return this.prisma.ideia.delete(args);
  }
}
