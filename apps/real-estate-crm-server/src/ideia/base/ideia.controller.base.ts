/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { IdeiaService } from "../ideia.service";
import { IdeiaCreateInput } from "./IdeiaCreateInput";
import { Ideia } from "./Ideia";
import { IdeiaFindManyArgs } from "./IdeiaFindManyArgs";
import { IdeiaWhereUniqueInput } from "./IdeiaWhereUniqueInput";
import { IdeiaUpdateInput } from "./IdeiaUpdateInput";

export class IdeiaControllerBase {
  constructor(protected readonly service: IdeiaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Ideia })
  async createIdeia(@common.Body() data: IdeiaCreateInput): Promise<Ideia> {
    return await this.service.createIdeia({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Ideia] })
  @ApiNestedQuery(IdeiaFindManyArgs)
  async ideias(@common.Req() request: Request): Promise<Ideia[]> {
    const args = plainToClass(IdeiaFindManyArgs, request.query);
    return this.service.ideias({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Ideia })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ideia(
    @common.Param() params: IdeiaWhereUniqueInput
  ): Promise<Ideia | null> {
    const result = await this.service.ideia({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Ideia })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateIdeia(
    @common.Param() params: IdeiaWhereUniqueInput,
    @common.Body() data: IdeiaUpdateInput
  ): Promise<Ideia | null> {
    try {
      return await this.service.updateIdeia({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Ideia })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteIdeia(
    @common.Param() params: IdeiaWhereUniqueInput
  ): Promise<Ideia | null> {
    try {
      return await this.service.deleteIdeia({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
