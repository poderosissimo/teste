/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Relatorio as PrismaRelatorio } from "@prisma/client";

export class RelatorioServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RelatorioCountArgs, "select">
  ): Promise<number> {
    return this.prisma.relatorio.count(args);
  }

  async relatorios<T extends Prisma.RelatorioFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RelatorioFindManyArgs>
  ): Promise<PrismaRelatorio[]> {
    return this.prisma.relatorio.findMany<Prisma.RelatorioFindManyArgs>(args);
  }
  async relatorio<T extends Prisma.RelatorioFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RelatorioFindUniqueArgs>
  ): Promise<PrismaRelatorio | null> {
    return this.prisma.relatorio.findUnique(args);
  }
  async createRelatorio<T extends Prisma.RelatorioCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RelatorioCreateArgs>
  ): Promise<PrismaRelatorio> {
    return this.prisma.relatorio.create<T>(args);
  }
  async updateRelatorio<T extends Prisma.RelatorioUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RelatorioUpdateArgs>
  ): Promise<PrismaRelatorio> {
    return this.prisma.relatorio.update<T>(args);
  }
  async deleteRelatorio<T extends Prisma.RelatorioDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RelatorioDeleteArgs>
  ): Promise<PrismaRelatorio> {
    return this.prisma.relatorio.delete(args);
  }
}
