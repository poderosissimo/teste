/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Relatorio } from "./Relatorio";
import { RelatorioCountArgs } from "./RelatorioCountArgs";
import { RelatorioFindManyArgs } from "./RelatorioFindManyArgs";
import { RelatorioFindUniqueArgs } from "./RelatorioFindUniqueArgs";
import { DeleteRelatorioArgs } from "./DeleteRelatorioArgs";
import { RelatorioService } from "../relatorio.service";
@graphql.Resolver(() => Relatorio)
export class RelatorioResolverBase {
  constructor(protected readonly service: RelatorioService) {}

  async _relatoriosMeta(
    @graphql.Args() args: RelatorioCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Relatorio])
  async relatorios(
    @graphql.Args() args: RelatorioFindManyArgs
  ): Promise<Relatorio[]> {
    return this.service.relatorios(args);
  }

  @graphql.Query(() => Relatorio, { nullable: true })
  async relatorio(
    @graphql.Args() args: RelatorioFindUniqueArgs
  ): Promise<Relatorio | null> {
    const result = await this.service.relatorio(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Relatorio)
  async deleteRelatorio(
    @graphql.Args() args: DeleteRelatorioArgs
  ): Promise<Relatorio | null> {
    try {
      return await this.service.deleteRelatorio(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
