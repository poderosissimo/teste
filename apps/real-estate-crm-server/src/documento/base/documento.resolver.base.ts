/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Documento } from "./Documento";
import { DocumentoCountArgs } from "./DocumentoCountArgs";
import { DocumentoFindManyArgs } from "./DocumentoFindManyArgs";
import { DocumentoFindUniqueArgs } from "./DocumentoFindUniqueArgs";
import { DeleteDocumentoArgs } from "./DeleteDocumentoArgs";
import { DocumentoService } from "../documento.service";
@graphql.Resolver(() => Documento)
export class DocumentoResolverBase {
  constructor(protected readonly service: DocumentoService) {}

  async _documentosMeta(
    @graphql.Args() args: DocumentoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Documento])
  async documentos(
    @graphql.Args() args: DocumentoFindManyArgs
  ): Promise<Documento[]> {
    return this.service.documentos(args);
  }

  @graphql.Query(() => Documento, { nullable: true })
  async documento(
    @graphql.Args() args: DocumentoFindUniqueArgs
  ): Promise<Documento | null> {
    const result = await this.service.documento(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Documento)
  async deleteDocumento(
    @graphql.Args() args: DeleteDocumentoArgs
  ): Promise<Documento | null> {
    try {
      return await this.service.deleteDocumento(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
