/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Projeto as PrismaProjeto } from "@prisma/client";

export class ProjetoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ProjetoCountArgs, "select">): Promise<number> {
    return this.prisma.projeto.count(args);
  }

  async projetos<T extends Prisma.ProjetoFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjetoFindManyArgs>
  ): Promise<PrismaProjeto[]> {
    return this.prisma.projeto.findMany<Prisma.ProjetoFindManyArgs>(args);
  }
  async projeto<T extends Prisma.ProjetoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjetoFindUniqueArgs>
  ): Promise<PrismaProjeto | null> {
    return this.prisma.projeto.findUnique(args);
  }
  async createProjeto<T extends Prisma.ProjetoCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjetoCreateArgs>
  ): Promise<PrismaProjeto> {
    return this.prisma.projeto.create<T>(args);
  }
  async updateProjeto<T extends Prisma.ProjetoUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjetoUpdateArgs>
  ): Promise<PrismaProjeto> {
    return this.prisma.projeto.update<T>(args);
  }
  async deleteProjeto<T extends Prisma.ProjetoDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjetoDeleteArgs>
  ): Promise<PrismaProjeto> {
    return this.prisma.projeto.delete(args);
  }
}
