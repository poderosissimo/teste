/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Projeto } from "./Projeto";
import { ProjetoCountArgs } from "./ProjetoCountArgs";
import { ProjetoFindManyArgs } from "./ProjetoFindManyArgs";
import { ProjetoFindUniqueArgs } from "./ProjetoFindUniqueArgs";
import { DeleteProjetoArgs } from "./DeleteProjetoArgs";
import { ProjetoService } from "../projeto.service";
@graphql.Resolver(() => Projeto)
export class ProjetoResolverBase {
  constructor(protected readonly service: ProjetoService) {}

  async _projetosMeta(
    @graphql.Args() args: ProjetoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Projeto])
  async projetos(
    @graphql.Args() args: ProjetoFindManyArgs
  ): Promise<Projeto[]> {
    return this.service.projetos(args);
  }

  @graphql.Query(() => Projeto, { nullable: true })
  async projeto(
    @graphql.Args() args: ProjetoFindUniqueArgs
  ): Promise<Projeto | null> {
    const result = await this.service.projeto(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Projeto)
  async deleteProjeto(
    @graphql.Args() args: DeleteProjetoArgs
  ): Promise<Projeto | null> {
    try {
      return await this.service.deleteProjeto(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
