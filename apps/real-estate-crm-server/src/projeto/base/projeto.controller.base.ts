/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProjetoService } from "../projeto.service";
import { ProjetoCreateInput } from "./ProjetoCreateInput";
import { Projeto } from "./Projeto";
import { ProjetoFindManyArgs } from "./ProjetoFindManyArgs";
import { ProjetoWhereUniqueInput } from "./ProjetoWhereUniqueInput";
import { ProjetoUpdateInput } from "./ProjetoUpdateInput";

export class ProjetoControllerBase {
  constructor(protected readonly service: ProjetoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Projeto })
  async createProjeto(
    @common.Body() data: ProjetoCreateInput
  ): Promise<Projeto> {
    return await this.service.createProjeto({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Projeto] })
  @ApiNestedQuery(ProjetoFindManyArgs)
  async projetos(@common.Req() request: Request): Promise<Projeto[]> {
    const args = plainToClass(ProjetoFindManyArgs, request.query);
    return this.service.projetos({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Projeto })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async projeto(
    @common.Param() params: ProjetoWhereUniqueInput
  ): Promise<Projeto | null> {
    const result = await this.service.projeto({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Projeto })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProjeto(
    @common.Param() params: ProjetoWhereUniqueInput,
    @common.Body() data: ProjetoUpdateInput
  ): Promise<Projeto | null> {
    try {
      return await this.service.updateProjeto({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Projeto })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProjeto(
    @common.Param() params: ProjetoWhereUniqueInput
  ): Promise<Projeto | null> {
    try {
      return await this.service.deleteProjeto({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
