/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RiskService } from "../risk.service";
import { RiskCreateInput } from "./RiskCreateInput";
import { Risk } from "./Risk";
import { RiskFindManyArgs } from "./RiskFindManyArgs";
import { RiskWhereUniqueInput } from "./RiskWhereUniqueInput";
import { RiskUpdateInput } from "./RiskUpdateInput";

export class RiskControllerBase {
  constructor(protected readonly service: RiskService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Risk })
  async createRisk(@common.Body() data: RiskCreateInput): Promise<Risk> {
    return await this.service.createRisk({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Risk] })
  @ApiNestedQuery(RiskFindManyArgs)
  async risks(@common.Req() request: Request): Promise<Risk[]> {
    const args = plainToClass(RiskFindManyArgs, request.query);
    return this.service.risks({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Risk })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async risk(
    @common.Param() params: RiskWhereUniqueInput
  ): Promise<Risk | null> {
    const result = await this.service.risk({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Risk })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRisk(
    @common.Param() params: RiskWhereUniqueInput,
    @common.Body() data: RiskUpdateInput
  ): Promise<Risk | null> {
    try {
      return await this.service.updateRisk({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Risk })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRisk(
    @common.Param() params: RiskWhereUniqueInput
  ): Promise<Risk | null> {
    try {
      return await this.service.deleteRisk({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
