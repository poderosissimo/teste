/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Communication as PrismaCommunication } from "@prisma/client";

export class CommunicationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CommunicationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.communication.count(args);
  }

  async communications<T extends Prisma.CommunicationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommunicationFindManyArgs>
  ): Promise<PrismaCommunication[]> {
    return this.prisma.communication.findMany<Prisma.CommunicationFindManyArgs>(
      args
    );
  }
  async communication<T extends Prisma.CommunicationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommunicationFindUniqueArgs>
  ): Promise<PrismaCommunication | null> {
    return this.prisma.communication.findUnique(args);
  }
  async createCommunication<T extends Prisma.CommunicationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommunicationCreateArgs>
  ): Promise<PrismaCommunication> {
    return this.prisma.communication.create<T>(args);
  }
  async updateCommunication<T extends Prisma.CommunicationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommunicationUpdateArgs>
  ): Promise<PrismaCommunication> {
    return this.prisma.communication.update<T>(args);
  }
  async deleteCommunication<T extends Prisma.CommunicationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommunicationDeleteArgs>
  ): Promise<PrismaCommunication> {
    return this.prisma.communication.delete(args);
  }
}
