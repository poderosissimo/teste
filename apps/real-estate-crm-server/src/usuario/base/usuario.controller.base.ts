/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UsuarioService } from "../usuario.service";
import { UsuarioCreateInput } from "./UsuarioCreateInput";
import { Usuario } from "./Usuario";
import { UsuarioFindManyArgs } from "./UsuarioFindManyArgs";
import { UsuarioWhereUniqueInput } from "./UsuarioWhereUniqueInput";
import { UsuarioUpdateInput } from "./UsuarioUpdateInput";

export class UsuarioControllerBase {
  constructor(protected readonly service: UsuarioService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Usuario })
  async createUsuario(
    @common.Body() data: UsuarioCreateInput
  ): Promise<Usuario> {
    return await this.service.createUsuario({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Usuario] })
  @ApiNestedQuery(UsuarioFindManyArgs)
  async usuarios(@common.Req() request: Request): Promise<Usuario[]> {
    const args = plainToClass(UsuarioFindManyArgs, request.query);
    return this.service.usuarios({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Usuario })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async usuario(
    @common.Param() params: UsuarioWhereUniqueInput
  ): Promise<Usuario | null> {
    const result = await this.service.usuario({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Usuario })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUsuario(
    @common.Param() params: UsuarioWhereUniqueInput,
    @common.Body() data: UsuarioUpdateInput
  ): Promise<Usuario | null> {
    try {
      return await this.service.updateUsuario({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Usuario })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUsuario(
    @common.Param() params: UsuarioWhereUniqueInput
  ): Promise<Usuario | null> {
    try {
      return await this.service.deleteUsuario({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
