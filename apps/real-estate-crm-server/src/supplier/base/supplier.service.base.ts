/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Supplier as PrismaSupplier } from "@prisma/client";

export class SupplierServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SupplierCountArgs, "select">): Promise<number> {
    return this.prisma.supplier.count(args);
  }

  async suppliers<T extends Prisma.SupplierFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SupplierFindManyArgs>
  ): Promise<PrismaSupplier[]> {
    return this.prisma.supplier.findMany<Prisma.SupplierFindManyArgs>(args);
  }
  async supplier<T extends Prisma.SupplierFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SupplierFindUniqueArgs>
  ): Promise<PrismaSupplier | null> {
    return this.prisma.supplier.findUnique(args);
  }
  async createSupplier<T extends Prisma.SupplierCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SupplierCreateArgs>
  ): Promise<PrismaSupplier> {
    return this.prisma.supplier.create<T>(args);
  }
  async updateSupplier<T extends Prisma.SupplierUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SupplierUpdateArgs>
  ): Promise<PrismaSupplier> {
    return this.prisma.supplier.update<T>(args);
  }
  async deleteSupplier<T extends Prisma.SupplierDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SupplierDeleteArgs>
  ): Promise<PrismaSupplier> {
    return this.prisma.supplier.delete(args);
  }
}
