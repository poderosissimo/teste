/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QualityService } from "../quality.service";
import { QualityCreateInput } from "./QualityCreateInput";
import { Quality } from "./Quality";
import { QualityFindManyArgs } from "./QualityFindManyArgs";
import { QualityWhereUniqueInput } from "./QualityWhereUniqueInput";
import { QualityUpdateInput } from "./QualityUpdateInput";

export class QualityControllerBase {
  constructor(protected readonly service: QualityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Quality })
  async createQuality(
    @common.Body() data: QualityCreateInput
  ): Promise<Quality> {
    return await this.service.createQuality({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Quality] })
  @ApiNestedQuery(QualityFindManyArgs)
  async qualities(@common.Req() request: Request): Promise<Quality[]> {
    const args = plainToClass(QualityFindManyArgs, request.query);
    return this.service.qualities({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Quality })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async quality(
    @common.Param() params: QualityWhereUniqueInput
  ): Promise<Quality | null> {
    const result = await this.service.quality({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Quality })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQuality(
    @common.Param() params: QualityWhereUniqueInput,
    @common.Body() data: QualityUpdateInput
  ): Promise<Quality | null> {
    try {
      return await this.service.updateQuality({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Quality })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQuality(
    @common.Param() params: QualityWhereUniqueInput
  ): Promise<Quality | null> {
    try {
      return await this.service.deleteQuality({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
