/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Quality as PrismaQuality } from "@prisma/client";

export class QualityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.QualityCountArgs, "select">): Promise<number> {
    return this.prisma.quality.count(args);
  }

  async qualities<T extends Prisma.QualityFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualityFindManyArgs>
  ): Promise<PrismaQuality[]> {
    return this.prisma.quality.findMany<Prisma.QualityFindManyArgs>(args);
  }
  async quality<T extends Prisma.QualityFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualityFindUniqueArgs>
  ): Promise<PrismaQuality | null> {
    return this.prisma.quality.findUnique(args);
  }
  async createQuality<T extends Prisma.QualityCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualityCreateArgs>
  ): Promise<PrismaQuality> {
    return this.prisma.quality.create<T>(args);
  }
  async updateQuality<T extends Prisma.QualityUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualityUpdateArgs>
  ): Promise<PrismaQuality> {
    return this.prisma.quality.update<T>(args);
  }
  async deleteQuality<T extends Prisma.QualityDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualityDeleteArgs>
  ): Promise<PrismaQuality> {
    return this.prisma.quality.delete(args);
  }
}
