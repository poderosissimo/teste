/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContatoService } from "../contato.service";
import { ContatoCreateInput } from "./ContatoCreateInput";
import { Contato } from "./Contato";
import { ContatoFindManyArgs } from "./ContatoFindManyArgs";
import { ContatoWhereUniqueInput } from "./ContatoWhereUniqueInput";
import { ContatoUpdateInput } from "./ContatoUpdateInput";

export class ContatoControllerBase {
  constructor(protected readonly service: ContatoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Contato })
  async createContato(
    @common.Body() data: ContatoCreateInput
  ): Promise<Contato> {
    return await this.service.createContato({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Contato] })
  @ApiNestedQuery(ContatoFindManyArgs)
  async contatoes(@common.Req() request: Request): Promise<Contato[]> {
    const args = plainToClass(ContatoFindManyArgs, request.query);
    return this.service.contatoes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Contato })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contato(
    @common.Param() params: ContatoWhereUniqueInput
  ): Promise<Contato | null> {
    const result = await this.service.contato({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Contato })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContato(
    @common.Param() params: ContatoWhereUniqueInput,
    @common.Body() data: ContatoUpdateInput
  ): Promise<Contato | null> {
    try {
      return await this.service.updateContato({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Contato })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContato(
    @common.Param() params: ContatoWhereUniqueInput
  ): Promise<Contato | null> {
    try {
      return await this.service.deleteContato({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
