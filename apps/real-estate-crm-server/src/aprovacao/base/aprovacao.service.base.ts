/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Aprovacao as PrismaAprovacao } from "@prisma/client";

export class AprovacaoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AprovacaoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.aprovacao.count(args);
  }

  async aprovacaos<T extends Prisma.AprovacaoFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AprovacaoFindManyArgs>
  ): Promise<PrismaAprovacao[]> {
    return this.prisma.aprovacao.findMany<Prisma.AprovacaoFindManyArgs>(args);
  }
  async aprovacao<T extends Prisma.AprovacaoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AprovacaoFindUniqueArgs>
  ): Promise<PrismaAprovacao | null> {
    return this.prisma.aprovacao.findUnique(args);
  }
  async createAprovacao<T extends Prisma.AprovacaoCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AprovacaoCreateArgs>
  ): Promise<PrismaAprovacao> {
    return this.prisma.aprovacao.create<T>(args);
  }
  async updateAprovacao<T extends Prisma.AprovacaoUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AprovacaoUpdateArgs>
  ): Promise<PrismaAprovacao> {
    return this.prisma.aprovacao.update<T>(args);
  }
  async deleteAprovacao<T extends Prisma.AprovacaoDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AprovacaoDeleteArgs>
  ): Promise<PrismaAprovacao> {
    return this.prisma.aprovacao.delete(args);
  }
}
