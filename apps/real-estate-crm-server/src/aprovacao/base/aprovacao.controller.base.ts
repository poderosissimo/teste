/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AprovacaoService } from "../aprovacao.service";
import { AprovacaoCreateInput } from "./AprovacaoCreateInput";
import { Aprovacao } from "./Aprovacao";
import { AprovacaoFindManyArgs } from "./AprovacaoFindManyArgs";
import { AprovacaoWhereUniqueInput } from "./AprovacaoWhereUniqueInput";
import { AprovacaoUpdateInput } from "./AprovacaoUpdateInput";

export class AprovacaoControllerBase {
  constructor(protected readonly service: AprovacaoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Aprovacao })
  async createAprovacao(
    @common.Body() data: AprovacaoCreateInput
  ): Promise<Aprovacao> {
    return await this.service.createAprovacao({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Aprovacao] })
  @ApiNestedQuery(AprovacaoFindManyArgs)
  async aprovacaos(@common.Req() request: Request): Promise<Aprovacao[]> {
    const args = plainToClass(AprovacaoFindManyArgs, request.query);
    return this.service.aprovacaos({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Aprovacao })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async aprovacao(
    @common.Param() params: AprovacaoWhereUniqueInput
  ): Promise<Aprovacao | null> {
    const result = await this.service.aprovacao({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Aprovacao })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAprovacao(
    @common.Param() params: AprovacaoWhereUniqueInput,
    @common.Body() data: AprovacaoUpdateInput
  ): Promise<Aprovacao | null> {
    try {
      return await this.service.updateAprovacao({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Aprovacao })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAprovacao(
    @common.Param() params: AprovacaoWhereUniqueInput
  ): Promise<Aprovacao | null> {
    try {
      return await this.service.deleteAprovacao({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
