/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InovacaoService } from "../inovacao.service";
import { InovacaoCreateInput } from "./InovacaoCreateInput";
import { Inovacao } from "./Inovacao";
import { InovacaoFindManyArgs } from "./InovacaoFindManyArgs";
import { InovacaoWhereUniqueInput } from "./InovacaoWhereUniqueInput";
import { InovacaoUpdateInput } from "./InovacaoUpdateInput";

export class InovacaoControllerBase {
  constructor(protected readonly service: InovacaoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Inovacao })
  async createInovacao(
    @common.Body() data: InovacaoCreateInput
  ): Promise<Inovacao> {
    return await this.service.createInovacao({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Inovacao] })
  @ApiNestedQuery(InovacaoFindManyArgs)
  async inovacaos(@common.Req() request: Request): Promise<Inovacao[]> {
    const args = plainToClass(InovacaoFindManyArgs, request.query);
    return this.service.inovacaos({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Inovacao })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async inovacao(
    @common.Param() params: InovacaoWhereUniqueInput
  ): Promise<Inovacao | null> {
    const result = await this.service.inovacao({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Inovacao })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInovacao(
    @common.Param() params: InovacaoWhereUniqueInput,
    @common.Body() data: InovacaoUpdateInput
  ): Promise<Inovacao | null> {
    try {
      return await this.service.updateInovacao({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Inovacao })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInovacao(
    @common.Param() params: InovacaoWhereUniqueInput
  ): Promise<Inovacao | null> {
    try {
      return await this.service.deleteInovacao({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
