/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Inovacao as PrismaInovacao } from "@prisma/client";

export class InovacaoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.InovacaoCountArgs, "select">): Promise<number> {
    return this.prisma.inovacao.count(args);
  }

  async inovacaos<T extends Prisma.InovacaoFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InovacaoFindManyArgs>
  ): Promise<PrismaInovacao[]> {
    return this.prisma.inovacao.findMany<Prisma.InovacaoFindManyArgs>(args);
  }
  async inovacao<T extends Prisma.InovacaoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.InovacaoFindUniqueArgs>
  ): Promise<PrismaInovacao | null> {
    return this.prisma.inovacao.findUnique(args);
  }
  async createInovacao<T extends Prisma.InovacaoCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InovacaoCreateArgs>
  ): Promise<PrismaInovacao> {
    return this.prisma.inovacao.create<T>(args);
  }
  async updateInovacao<T extends Prisma.InovacaoUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InovacaoUpdateArgs>
  ): Promise<PrismaInovacao> {
    return this.prisma.inovacao.update<T>(args);
  }
  async deleteInovacao<T extends Prisma.InovacaoDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.InovacaoDeleteArgs>
  ): Promise<PrismaInovacao> {
    return this.prisma.inovacao.delete(args);
  }
}
