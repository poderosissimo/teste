/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CampanhaMarketingService } from "../campanhaMarketing.service";
import { CampanhaMarketingCreateInput } from "./CampanhaMarketingCreateInput";
import { CampanhaMarketing } from "./CampanhaMarketing";
import { CampanhaMarketingFindManyArgs } from "./CampanhaMarketingFindManyArgs";
import { CampanhaMarketingWhereUniqueInput } from "./CampanhaMarketingWhereUniqueInput";
import { CampanhaMarketingUpdateInput } from "./CampanhaMarketingUpdateInput";

export class CampanhaMarketingControllerBase {
  constructor(protected readonly service: CampanhaMarketingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CampanhaMarketing })
  async createCampanhaMarketing(
    @common.Body() data: CampanhaMarketingCreateInput
  ): Promise<CampanhaMarketing> {
    return await this.service.createCampanhaMarketing({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CampanhaMarketing] })
  @ApiNestedQuery(CampanhaMarketingFindManyArgs)
  async campanhaMarketings(
    @common.Req() request: Request
  ): Promise<CampanhaMarketing[]> {
    const args = plainToClass(CampanhaMarketingFindManyArgs, request.query);
    return this.service.campanhaMarketings({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CampanhaMarketing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async campanhaMarketing(
    @common.Param() params: CampanhaMarketingWhereUniqueInput
  ): Promise<CampanhaMarketing | null> {
    const result = await this.service.campanhaMarketing({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CampanhaMarketing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCampanhaMarketing(
    @common.Param() params: CampanhaMarketingWhereUniqueInput,
    @common.Body() data: CampanhaMarketingUpdateInput
  ): Promise<CampanhaMarketing | null> {
    try {
      return await this.service.updateCampanhaMarketing({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CampanhaMarketing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCampanhaMarketing(
    @common.Param() params: CampanhaMarketingWhereUniqueInput
  ): Promise<CampanhaMarketing | null> {
    try {
      return await this.service.deleteCampanhaMarketing({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
