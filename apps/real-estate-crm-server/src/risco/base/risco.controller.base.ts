/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RiscoService } from "../risco.service";
import { RiscoCreateInput } from "./RiscoCreateInput";
import { Risco } from "./Risco";
import { RiscoFindManyArgs } from "./RiscoFindManyArgs";
import { RiscoWhereUniqueInput } from "./RiscoWhereUniqueInput";
import { RiscoUpdateInput } from "./RiscoUpdateInput";

export class RiscoControllerBase {
  constructor(protected readonly service: RiscoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Risco })
  async createRisco(@common.Body() data: RiscoCreateInput): Promise<Risco> {
    return await this.service.createRisco({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Risco] })
  @ApiNestedQuery(RiscoFindManyArgs)
  async riscos(@common.Req() request: Request): Promise<Risco[]> {
    const args = plainToClass(RiscoFindManyArgs, request.query);
    return this.service.riscos({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Risco })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async risco(
    @common.Param() params: RiscoWhereUniqueInput
  ): Promise<Risco | null> {
    const result = await this.service.risco({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Risco })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRisco(
    @common.Param() params: RiscoWhereUniqueInput,
    @common.Body() data: RiscoUpdateInput
  ): Promise<Risco | null> {
    try {
      return await this.service.updateRisco({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Risco })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRisco(
    @common.Param() params: RiscoWhereUniqueInput
  ): Promise<Risco | null> {
    try {
      return await this.service.deleteRisco({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
