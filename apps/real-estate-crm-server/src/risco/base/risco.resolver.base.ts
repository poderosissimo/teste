/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Risco } from "./Risco";
import { RiscoCountArgs } from "./RiscoCountArgs";
import { RiscoFindManyArgs } from "./RiscoFindManyArgs";
import { RiscoFindUniqueArgs } from "./RiscoFindUniqueArgs";
import { DeleteRiscoArgs } from "./DeleteRiscoArgs";
import { RiscoService } from "../risco.service";
@graphql.Resolver(() => Risco)
export class RiscoResolverBase {
  constructor(protected readonly service: RiscoService) {}

  async _riscosMeta(
    @graphql.Args() args: RiscoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Risco])
  async riscos(@graphql.Args() args: RiscoFindManyArgs): Promise<Risco[]> {
    return this.service.riscos(args);
  }

  @graphql.Query(() => Risco, { nullable: true })
  async risco(
    @graphql.Args() args: RiscoFindUniqueArgs
  ): Promise<Risco | null> {
    const result = await this.service.risco(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Risco)
  async deleteRisco(
    @graphql.Args() args: DeleteRiscoArgs
  ): Promise<Risco | null> {
    try {
      return await this.service.deleteRisco(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
