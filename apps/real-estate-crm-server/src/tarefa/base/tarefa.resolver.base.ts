/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Tarefa } from "./Tarefa";
import { TarefaCountArgs } from "./TarefaCountArgs";
import { TarefaFindManyArgs } from "./TarefaFindManyArgs";
import { TarefaFindUniqueArgs } from "./TarefaFindUniqueArgs";
import { DeleteTarefaArgs } from "./DeleteTarefaArgs";
import { TarefaService } from "../tarefa.service";
@graphql.Resolver(() => Tarefa)
export class TarefaResolverBase {
  constructor(protected readonly service: TarefaService) {}

  async _tarefasMeta(
    @graphql.Args() args: TarefaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Tarefa])
  async tarefas(@graphql.Args() args: TarefaFindManyArgs): Promise<Tarefa[]> {
    return this.service.tarefas(args);
  }

  @graphql.Query(() => Tarefa, { nullable: true })
  async tarefa(
    @graphql.Args() args: TarefaFindUniqueArgs
  ): Promise<Tarefa | null> {
    const result = await this.service.tarefa(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Tarefa)
  async deleteTarefa(
    @graphql.Args() args: DeleteTarefaArgs
  ): Promise<Tarefa | null> {
    try {
      return await this.service.deleteTarefa(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
