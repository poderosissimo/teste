/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TarefaService } from "../tarefa.service";
import { TarefaCreateInput } from "./TarefaCreateInput";
import { Tarefa } from "./Tarefa";
import { TarefaFindManyArgs } from "./TarefaFindManyArgs";
import { TarefaWhereUniqueInput } from "./TarefaWhereUniqueInput";
import { TarefaUpdateInput } from "./TarefaUpdateInput";

export class TarefaControllerBase {
  constructor(protected readonly service: TarefaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Tarefa })
  async createTarefa(@common.Body() data: TarefaCreateInput): Promise<Tarefa> {
    return await this.service.createTarefa({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Tarefa] })
  @ApiNestedQuery(TarefaFindManyArgs)
  async tarefas(@common.Req() request: Request): Promise<Tarefa[]> {
    const args = plainToClass(TarefaFindManyArgs, request.query);
    return this.service.tarefas({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Tarefa })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tarefa(
    @common.Param() params: TarefaWhereUniqueInput
  ): Promise<Tarefa | null> {
    const result = await this.service.tarefa({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Tarefa })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTarefa(
    @common.Param() params: TarefaWhereUniqueInput,
    @common.Body() data: TarefaUpdateInput
  ): Promise<Tarefa | null> {
    try {
      return await this.service.updateTarefa({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Tarefa })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTarefa(
    @common.Param() params: TarefaWhereUniqueInput
  ): Promise<Tarefa | null> {
    try {
      return await this.service.deleteTarefa({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
