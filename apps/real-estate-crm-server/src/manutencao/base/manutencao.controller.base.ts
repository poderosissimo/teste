/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ManutencaoService } from "../manutencao.service";
import { ManutencaoCreateInput } from "./ManutencaoCreateInput";
import { Manutencao } from "./Manutencao";
import { ManutencaoFindManyArgs } from "./ManutencaoFindManyArgs";
import { ManutencaoWhereUniqueInput } from "./ManutencaoWhereUniqueInput";
import { ManutencaoUpdateInput } from "./ManutencaoUpdateInput";

export class ManutencaoControllerBase {
  constructor(protected readonly service: ManutencaoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Manutencao })
  async createManutencao(
    @common.Body() data: ManutencaoCreateInput
  ): Promise<Manutencao> {
    return await this.service.createManutencao({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Manutencao] })
  @ApiNestedQuery(ManutencaoFindManyArgs)
  async manutencaos(@common.Req() request: Request): Promise<Manutencao[]> {
    const args = plainToClass(ManutencaoFindManyArgs, request.query);
    return this.service.manutencaos({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Manutencao })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async manutencao(
    @common.Param() params: ManutencaoWhereUniqueInput
  ): Promise<Manutencao | null> {
    const result = await this.service.manutencao({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Manutencao })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateManutencao(
    @common.Param() params: ManutencaoWhereUniqueInput,
    @common.Body() data: ManutencaoUpdateInput
  ): Promise<Manutencao | null> {
    try {
      return await this.service.updateManutencao({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Manutencao })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteManutencao(
    @common.Param() params: ManutencaoWhereUniqueInput
  ): Promise<Manutencao | null> {
    try {
      return await this.service.deleteManutencao({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
