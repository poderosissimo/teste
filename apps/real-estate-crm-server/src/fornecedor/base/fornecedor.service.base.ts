/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Fornecedor as PrismaFornecedor } from "@prisma/client";

export class FornecedorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FornecedorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.fornecedor.count(args);
  }

  async fornecedors<T extends Prisma.FornecedorFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FornecedorFindManyArgs>
  ): Promise<PrismaFornecedor[]> {
    return this.prisma.fornecedor.findMany<Prisma.FornecedorFindManyArgs>(args);
  }
  async fornecedor<T extends Prisma.FornecedorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FornecedorFindUniqueArgs>
  ): Promise<PrismaFornecedor | null> {
    return this.prisma.fornecedor.findUnique(args);
  }
  async createFornecedor<T extends Prisma.FornecedorCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FornecedorCreateArgs>
  ): Promise<PrismaFornecedor> {
    return this.prisma.fornecedor.create<T>(args);
  }
  async updateFornecedor<T extends Prisma.FornecedorUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FornecedorUpdateArgs>
  ): Promise<PrismaFornecedor> {
    return this.prisma.fornecedor.update<T>(args);
  }
  async deleteFornecedor<T extends Prisma.FornecedorDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FornecedorDeleteArgs>
  ): Promise<PrismaFornecedor> {
    return this.prisma.fornecedor.delete(args);
  }
}
