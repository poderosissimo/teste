/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TicketSuporteService } from "../ticketSuporte.service";
import { TicketSuporteCreateInput } from "./TicketSuporteCreateInput";
import { TicketSuporte } from "./TicketSuporte";
import { TicketSuporteFindManyArgs } from "./TicketSuporteFindManyArgs";
import { TicketSuporteWhereUniqueInput } from "./TicketSuporteWhereUniqueInput";
import { TicketSuporteUpdateInput } from "./TicketSuporteUpdateInput";

export class TicketSuporteControllerBase {
  constructor(protected readonly service: TicketSuporteService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TicketSuporte })
  async createTicketSuporte(
    @common.Body() data: TicketSuporteCreateInput
  ): Promise<TicketSuporte> {
    return await this.service.createTicketSuporte({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TicketSuporte] })
  @ApiNestedQuery(TicketSuporteFindManyArgs)
  async ticketSuportes(
    @common.Req() request: Request
  ): Promise<TicketSuporte[]> {
    const args = plainToClass(TicketSuporteFindManyArgs, request.query);
    return this.service.ticketSuportes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TicketSuporte })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ticketSuporte(
    @common.Param() params: TicketSuporteWhereUniqueInput
  ): Promise<TicketSuporte | null> {
    const result = await this.service.ticketSuporte({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TicketSuporte })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTicketSuporte(
    @common.Param() params: TicketSuporteWhereUniqueInput,
    @common.Body() data: TicketSuporteUpdateInput
  ): Promise<TicketSuporte | null> {
    try {
      return await this.service.updateTicketSuporte({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TicketSuporte })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTicketSuporte(
    @common.Param() params: TicketSuporteWhereUniqueInput
  ): Promise<TicketSuporte | null> {
    try {
      return await this.service.deleteTicketSuporte({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
