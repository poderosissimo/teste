/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TicketSuporte } from "./TicketSuporte";
import { TicketSuporteCountArgs } from "./TicketSuporteCountArgs";
import { TicketSuporteFindManyArgs } from "./TicketSuporteFindManyArgs";
import { TicketSuporteFindUniqueArgs } from "./TicketSuporteFindUniqueArgs";
import { DeleteTicketSuporteArgs } from "./DeleteTicketSuporteArgs";
import { TicketSuporteService } from "../ticketSuporte.service";
@graphql.Resolver(() => TicketSuporte)
export class TicketSuporteResolverBase {
  constructor(protected readonly service: TicketSuporteService) {}

  async _ticketSuportesMeta(
    @graphql.Args() args: TicketSuporteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TicketSuporte])
  async ticketSuportes(
    @graphql.Args() args: TicketSuporteFindManyArgs
  ): Promise<TicketSuporte[]> {
    return this.service.ticketSuportes(args);
  }

  @graphql.Query(() => TicketSuporte, { nullable: true })
  async ticketSuporte(
    @graphql.Args() args: TicketSuporteFindUniqueArgs
  ): Promise<TicketSuporte | null> {
    const result = await this.service.ticketSuporte(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TicketSuporte)
  async deleteTicketSuporte(
    @graphql.Args() args: DeleteTicketSuporteArgs
  ): Promise<TicketSuporte | null> {
    try {
      return await this.service.deleteTicketSuporte(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
