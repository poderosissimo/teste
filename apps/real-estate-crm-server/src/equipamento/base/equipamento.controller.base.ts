/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EquipamentoService } from "../equipamento.service";
import { EquipamentoCreateInput } from "./EquipamentoCreateInput";
import { Equipamento } from "./Equipamento";
import { EquipamentoFindManyArgs } from "./EquipamentoFindManyArgs";
import { EquipamentoWhereUniqueInput } from "./EquipamentoWhereUniqueInput";
import { EquipamentoUpdateInput } from "./EquipamentoUpdateInput";

export class EquipamentoControllerBase {
  constructor(protected readonly service: EquipamentoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Equipamento })
  async createEquipamento(
    @common.Body() data: EquipamentoCreateInput
  ): Promise<Equipamento> {
    return await this.service.createEquipamento({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Equipamento] })
  @ApiNestedQuery(EquipamentoFindManyArgs)
  async equipamentos(@common.Req() request: Request): Promise<Equipamento[]> {
    const args = plainToClass(EquipamentoFindManyArgs, request.query);
    return this.service.equipamentos({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Equipamento })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async equipamento(
    @common.Param() params: EquipamentoWhereUniqueInput
  ): Promise<Equipamento | null> {
    const result = await this.service.equipamento({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Equipamento })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEquipamento(
    @common.Param() params: EquipamentoWhereUniqueInput,
    @common.Body() data: EquipamentoUpdateInput
  ): Promise<Equipamento | null> {
    try {
      return await this.service.updateEquipamento({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Equipamento })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEquipamento(
    @common.Param() params: EquipamentoWhereUniqueInput
  ): Promise<Equipamento | null> {
    try {
      return await this.service.deleteEquipamento({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
