/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { IsString, IsOptional, ValidateNested, IsEnum } from "class-validator";
import { NotificationCreateNestedManyWithoutUsersInput } from "./NotificationCreateNestedManyWithoutUsersInput";
import { Type } from "class-transformer";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { InputJsonValue } from "../../types";
import { ReviewCreateNestedManyWithoutUsersInput } from "./ReviewCreateNestedManyWithoutUsersInput";
import { EnumUserRoles } from "./EnumUserRoles";
import { ServiceBookingCreateNestedManyWithoutUsersInput } from "./ServiceBookingCreateNestedManyWithoutUsersInput";
import { SupportTicketCreateNestedManyWithoutUsersInput } from "./SupportTicketCreateNestedManyWithoutUsersInput";

@InputType()
class UserCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string | null;

  @ApiProperty({
    required: false,
    type: () => NotificationCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => NotificationCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => NotificationCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  notifications?: NotificationCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  password?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  phoneNumber?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  profilePicture?: InputJsonValue;

  @ApiProperty({
    required: false,
    type: () => ReviewCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ReviewCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ReviewCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  reviews?: ReviewCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    enum: EnumUserRoles,
    isArray: true,
  })
  @IsEnum(EnumUserRoles, {
    each: true,
  })
  @IsOptional()
  @Field(() => [EnumUserRoles], {
    nullable: true,
  })
  roles?: Array<"Option1">;

  @ApiProperty({
    required: false,
    type: () => ServiceBookingCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ServiceBookingCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ServiceBookingCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  serviceBookings?: ServiceBookingCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => SupportTicketCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => SupportTicketCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => SupportTicketCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  supportTickets?: SupportTicketCreateNestedManyWithoutUsersInput;
}

export { UserCreateInput as UserCreateInput };
