/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ServiceBooking } from "./ServiceBooking";
import { ServiceBookingCountArgs } from "./ServiceBookingCountArgs";
import { ServiceBookingFindManyArgs } from "./ServiceBookingFindManyArgs";
import { ServiceBookingFindUniqueArgs } from "./ServiceBookingFindUniqueArgs";
import { CreateServiceBookingArgs } from "./CreateServiceBookingArgs";
import { UpdateServiceBookingArgs } from "./UpdateServiceBookingArgs";
import { DeleteServiceBookingArgs } from "./DeleteServiceBookingArgs";
import { ReviewFindManyArgs } from "../../review/base/ReviewFindManyArgs";
import { Review } from "../../review/base/Review";
import { Provider } from "../../provider/base/Provider";
import { User } from "../../user/base/User";
import { ServiceBookingService } from "../serviceBooking.service";
@graphql.Resolver(() => ServiceBooking)
export class ServiceBookingResolverBase {
  constructor(protected readonly service: ServiceBookingService) {}

  async _serviceBookingsMeta(
    @graphql.Args() args: ServiceBookingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ServiceBooking])
  async serviceBookings(
    @graphql.Args() args: ServiceBookingFindManyArgs
  ): Promise<ServiceBooking[]> {
    return this.service.serviceBookings(args);
  }

  @graphql.Query(() => ServiceBooking, { nullable: true })
  async serviceBooking(
    @graphql.Args() args: ServiceBookingFindUniqueArgs
  ): Promise<ServiceBooking | null> {
    const result = await this.service.serviceBooking(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ServiceBooking)
  async createServiceBooking(
    @graphql.Args() args: CreateServiceBookingArgs
  ): Promise<ServiceBooking> {
    return await this.service.createServiceBooking({
      ...args,
      data: {
        ...args.data,

        provider: args.data.provider
          ? {
              connect: args.data.provider,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ServiceBooking)
  async updateServiceBooking(
    @graphql.Args() args: UpdateServiceBookingArgs
  ): Promise<ServiceBooking | null> {
    try {
      return await this.service.updateServiceBooking({
        ...args,
        data: {
          ...args.data,

          provider: args.data.provider
            ? {
                connect: args.data.provider,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServiceBooking)
  async deleteServiceBooking(
    @graphql.Args() args: DeleteServiceBookingArgs
  ): Promise<ServiceBooking | null> {
    try {
      return await this.service.deleteServiceBooking(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Review], { name: "reviews" })
  async findReviews(
    @graphql.Parent() parent: ServiceBooking,
    @graphql.Args() args: ReviewFindManyArgs
  ): Promise<Review[]> {
    const results = await this.service.findReviews(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Provider, {
    nullable: true,
    name: "provider",
  })
  async getProvider(
    @graphql.Parent() parent: ServiceBooking
  ): Promise<Provider | null> {
    const result = await this.service.getProvider(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: ServiceBooking
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
