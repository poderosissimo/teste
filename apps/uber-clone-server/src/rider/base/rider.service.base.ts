/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Rider as PrismaRider,
  Ride as PrismaRide,
} from "@prisma/client";

export class RiderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RiderCountArgs, "select">): Promise<number> {
    return this.prisma.rider.count(args);
  }

  async riders<T extends Prisma.RiderFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RiderFindManyArgs>
  ): Promise<PrismaRider[]> {
    return this.prisma.rider.findMany<Prisma.RiderFindManyArgs>(args);
  }
  async rider<T extends Prisma.RiderFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RiderFindUniqueArgs>
  ): Promise<PrismaRider | null> {
    return this.prisma.rider.findUnique(args);
  }
  async createRider<T extends Prisma.RiderCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RiderCreateArgs>
  ): Promise<PrismaRider> {
    return this.prisma.rider.create<T>(args);
  }
  async updateRider<T extends Prisma.RiderUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RiderUpdateArgs>
  ): Promise<PrismaRider> {
    return this.prisma.rider.update<T>(args);
  }
  async deleteRider<T extends Prisma.RiderDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RiderDeleteArgs>
  ): Promise<PrismaRider> {
    return this.prisma.rider.delete(args);
  }

  async findRides(
    parentId: string,
    args: Prisma.RideFindManyArgs
  ): Promise<PrismaRide[]> {
    return this.prisma.rider
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .rides(args);
  }
}
