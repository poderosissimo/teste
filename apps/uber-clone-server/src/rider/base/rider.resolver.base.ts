/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Rider } from "./Rider";
import { RiderCountArgs } from "./RiderCountArgs";
import { RiderFindManyArgs } from "./RiderFindManyArgs";
import { RiderFindUniqueArgs } from "./RiderFindUniqueArgs";
import { CreateRiderArgs } from "./CreateRiderArgs";
import { UpdateRiderArgs } from "./UpdateRiderArgs";
import { DeleteRiderArgs } from "./DeleteRiderArgs";
import { RideFindManyArgs } from "../../ride/base/RideFindManyArgs";
import { Ride } from "../../ride/base/Ride";
import { RiderService } from "../rider.service";
@graphql.Resolver(() => Rider)
export class RiderResolverBase {
  constructor(protected readonly service: RiderService) {}

  async _ridersMeta(
    @graphql.Args() args: RiderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Rider])
  async riders(@graphql.Args() args: RiderFindManyArgs): Promise<Rider[]> {
    return this.service.riders(args);
  }

  @graphql.Query(() => Rider, { nullable: true })
  async rider(
    @graphql.Args() args: RiderFindUniqueArgs
  ): Promise<Rider | null> {
    const result = await this.service.rider(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Rider)
  async createRider(@graphql.Args() args: CreateRiderArgs): Promise<Rider> {
    return await this.service.createRider({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Rider)
  async updateRider(
    @graphql.Args() args: UpdateRiderArgs
  ): Promise<Rider | null> {
    try {
      return await this.service.updateRider({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Rider)
  async deleteRider(
    @graphql.Args() args: DeleteRiderArgs
  ): Promise<Rider | null> {
    try {
      return await this.service.deleteRider(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Ride], { name: "rides" })
  async findRides(
    @graphql.Parent() parent: Rider,
    @graphql.Args() args: RideFindManyArgs
  ): Promise<Ride[]> {
    const results = await this.service.findRides(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
