/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Provider as PrismaProvider,
  Review as PrismaReview,
  ServiceBooking as PrismaServiceBooking,
  SupportTicket as PrismaSupportTicket,
} from "@prisma/client";

export class ProviderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ProviderCountArgs, "select">): Promise<number> {
    return this.prisma.provider.count(args);
  }

  async providers<T extends Prisma.ProviderFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProviderFindManyArgs>
  ): Promise<PrismaProvider[]> {
    return this.prisma.provider.findMany<Prisma.ProviderFindManyArgs>(args);
  }
  async provider<T extends Prisma.ProviderFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProviderFindUniqueArgs>
  ): Promise<PrismaProvider | null> {
    return this.prisma.provider.findUnique(args);
  }
  async createProvider<T extends Prisma.ProviderCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProviderCreateArgs>
  ): Promise<PrismaProvider> {
    return this.prisma.provider.create<T>(args);
  }
  async updateProvider<T extends Prisma.ProviderUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProviderUpdateArgs>
  ): Promise<PrismaProvider> {
    return this.prisma.provider.update<T>(args);
  }
  async deleteProvider<T extends Prisma.ProviderDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProviderDeleteArgs>
  ): Promise<PrismaProvider> {
    return this.prisma.provider.delete(args);
  }

  async findReviews(
    parentId: string,
    args: Prisma.ReviewFindManyArgs
  ): Promise<PrismaReview[]> {
    return this.prisma.provider
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reviews(args);
  }

  async findServiceBookings(
    parentId: string,
    args: Prisma.ServiceBookingFindManyArgs
  ): Promise<PrismaServiceBooking[]> {
    return this.prisma.provider
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .serviceBookings(args);
  }

  async findSupportTickets(
    parentId: string,
    args: Prisma.SupportTicketFindManyArgs
  ): Promise<PrismaSupportTicket[]> {
    return this.prisma.provider
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .supportTickets(args);
  }
}
