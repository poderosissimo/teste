datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  author    String?
  comments  Comment[]
  content   String?
  createdAt DateTime  @default(now())
  feed      Feed?     @relation(fields: [feedId], references: [id])
  feedId    String?
  id        String    @id @default(cuid())
  likes     Like[]
  media     Json?
  updatedAt DateTime  @updatedAt
}

model User {
  bio            String?
  createdAt      DateTime       @default(now())
  email          String?
  feeds          Feed[]
  friends        Friend[]
  id             String         @id @default(cuid())
  likes          Like[]
  notifications  Notification[]
  password       String?
  profilePicture Json?
  updatedAt      DateTime       @updatedAt
  username       String?
}

model Comment {
  author    String?
  content   String?
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  updatedAt DateTime @updatedAt
}

model Chat {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  message   String?
  receiver  String?
  sender    String?
  updatedAt DateTime @updatedAt
}

model Feed {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  posts     Post[]
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Location {
  createdAt DateTime @default(now())
  geoJson   Json?
  id        String   @id @default(cuid())
  latitude  Float?
  longitude Float?
  updatedAt DateTime @updatedAt
}

model Friend {
  createdAt DateTime @default(now())
  friend    Friend?  @relation(name: "FriendOnFriends", fields: [friendId], references: [id])
  friendId  String?
  friends   Friend[] @relation(name: "FriendOnFriends")
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Notification {
  content   String?
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  isRead    Boolean?
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Like {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model FriendRequest {
  createdAt DateTime                 @default(now())
  id        String                   @id @default(cuid())
  receiver  String?
  sender    String?
  status    EnumFriendRequestStatus?
  updatedAt DateTime                 @updatedAt
}

model UserLocation {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  latitude  Float?
  longitude Float?
  updatedAt DateTime @updatedAt
  userId    String?
}

model ChatMessage {
  createdAt DateTime  @default(now())
  id        String    @id @default(cuid())
  message   String?
  senderId  String?
  timestamp DateTime?
  updatedAt DateTime  @updatedAt
}

model Follow {
  createdAt  DateTime @default(now())
  followedId String?
  followerId String?
  id         String   @id @default(cuid())
  updatedAt  DateTime @updatedAt
}

enum EnumFriendRequestStatus {
  Option1
}
