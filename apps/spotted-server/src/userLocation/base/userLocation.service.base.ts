/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UserLocation as PrismaUserLocation } from "@prisma/client";

export class UserLocationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserLocationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userLocation.count(args);
  }

  async userLocations<T extends Prisma.UserLocationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserLocationFindManyArgs>
  ): Promise<PrismaUserLocation[]> {
    return this.prisma.userLocation.findMany<Prisma.UserLocationFindManyArgs>(
      args
    );
  }
  async userLocation<T extends Prisma.UserLocationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserLocationFindUniqueArgs>
  ): Promise<PrismaUserLocation | null> {
    return this.prisma.userLocation.findUnique(args);
  }
  async createUserLocation<T extends Prisma.UserLocationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserLocationCreateArgs>
  ): Promise<PrismaUserLocation> {
    return this.prisma.userLocation.create<T>(args);
  }
  async updateUserLocation<T extends Prisma.UserLocationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserLocationUpdateArgs>
  ): Promise<PrismaUserLocation> {
    return this.prisma.userLocation.update<T>(args);
  }
  async deleteUserLocation<T extends Prisma.UserLocationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserLocationDeleteArgs>
  ): Promise<PrismaUserLocation> {
    return this.prisma.userLocation.delete(args);
  }
}
