/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Friend as PrismaFriend,
  User as PrismaUser,
} from "@prisma/client";

export class FriendServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FriendCountArgs, "select">): Promise<number> {
    return this.prisma.friend.count(args);
  }

  async friends<T extends Prisma.FriendFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FriendFindManyArgs>
  ): Promise<PrismaFriend[]> {
    return this.prisma.friend.findMany<Prisma.FriendFindManyArgs>(args);
  }
  async friend<T extends Prisma.FriendFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FriendFindUniqueArgs>
  ): Promise<PrismaFriend | null> {
    return this.prisma.friend.findUnique(args);
  }
  async createFriend<T extends Prisma.FriendCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FriendCreateArgs>
  ): Promise<PrismaFriend> {
    return this.prisma.friend.create<T>(args);
  }
  async updateFriend<T extends Prisma.FriendUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FriendUpdateArgs>
  ): Promise<PrismaFriend> {
    return this.prisma.friend.update<T>(args);
  }
  async deleteFriend<T extends Prisma.FriendDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FriendDeleteArgs>
  ): Promise<PrismaFriend> {
    return this.prisma.friend.delete(args);
  }

  async findFriends(
    parentId: string,
    args: Prisma.FriendFindManyArgs
  ): Promise<PrismaFriend[]> {
    return this.prisma.friend
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .friends(args);
  }

  async getFriend(parentId: string): Promise<PrismaFriend | null> {
    return this.prisma.friend
      .findUnique({
        where: { id: parentId },
      })
      .friend();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.friend
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
