/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Feed as PrismaFeed,
  Post as PrismaPost,
  User as PrismaUser,
} from "@prisma/client";

export class FeedServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FeedCountArgs, "select">): Promise<number> {
    return this.prisma.feed.count(args);
  }

  async feeds<T extends Prisma.FeedFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeedFindManyArgs>
  ): Promise<PrismaFeed[]> {
    return this.prisma.feed.findMany<Prisma.FeedFindManyArgs>(args);
  }
  async feed<T extends Prisma.FeedFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeedFindUniqueArgs>
  ): Promise<PrismaFeed | null> {
    return this.prisma.feed.findUnique(args);
  }
  async createFeed<T extends Prisma.FeedCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeedCreateArgs>
  ): Promise<PrismaFeed> {
    return this.prisma.feed.create<T>(args);
  }
  async updateFeed<T extends Prisma.FeedUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeedUpdateArgs>
  ): Promise<PrismaFeed> {
    return this.prisma.feed.update<T>(args);
  }
  async deleteFeed<T extends Prisma.FeedDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeedDeleteArgs>
  ): Promise<PrismaFeed> {
    return this.prisma.feed.delete(args);
  }

  async findPosts(
    parentId: string,
    args: Prisma.PostFindManyArgs
  ): Promise<PrismaPost[]> {
    return this.prisma.feed
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .posts(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.feed
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
