/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FriendRequestService } from "../friendRequest.service";
import { FriendRequestCreateInput } from "./FriendRequestCreateInput";
import { FriendRequest } from "./FriendRequest";
import { Post } from "../../post/base/Post";
import { FriendRequestFindManyArgs } from "./FriendRequestFindManyArgs";
import { FriendRequestWhereUniqueInput } from "./FriendRequestWhereUniqueInput";
import { FriendRequestUpdateInput } from "./FriendRequestUpdateInput";

export class FriendRequestControllerBase {
  constructor(protected readonly service: FriendRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FriendRequest })
  async createFriendRequest(
    @common.Body() data: FriendRequestCreateInput
  ): Promise<FriendRequest> {
    return await this.service.createFriendRequest({
      data: data,
      select: {
        createdAt: true,
        id: true,
        receiver: true,
        sender: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FriendRequest] })
  @ApiNestedQuery(FriendRequestFindManyArgs)
  async friendRequests(
    @common.Req() request: Request
  ): Promise<FriendRequest[]> {
    const args = plainToClass(FriendRequestFindManyArgs, request.query);
    return this.service.friendRequests({
      ...args,
      select: {
        createdAt: true,
        id: true,
        receiver: true,
        sender: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FriendRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async friendRequest(
    @common.Param() params: FriendRequestWhereUniqueInput
  ): Promise<FriendRequest | null> {
    const result = await this.service.friendRequest({
      where: params,
      select: {
        createdAt: true,
        id: true,
        receiver: true,
        sender: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FriendRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFriendRequest(
    @common.Param() params: FriendRequestWhereUniqueInput,
    @common.Body() data: FriendRequestUpdateInput
  ): Promise<FriendRequest | null> {
    try {
      return await this.service.updateFriendRequest({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          receiver: true,
          sender: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FriendRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFriendRequest(
    @common.Param() params: FriendRequestWhereUniqueInput
  ): Promise<FriendRequest | null> {
    try {
      return await this.service.deleteFriendRequest({
        where: params,
        select: {
          createdAt: true,
          id: true,
          receiver: true,
          sender: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
