/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FriendRequest } from "./FriendRequest";
import { FriendRequestCountArgs } from "./FriendRequestCountArgs";
import { FriendRequestFindManyArgs } from "./FriendRequestFindManyArgs";
import { FriendRequestFindUniqueArgs } from "./FriendRequestFindUniqueArgs";
import { CreateFriendRequestArgs } from "./CreateFriendRequestArgs";
import { UpdateFriendRequestArgs } from "./UpdateFriendRequestArgs";
import { DeleteFriendRequestArgs } from "./DeleteFriendRequestArgs";
import { FriendRequestService } from "../friendRequest.service";
@graphql.Resolver(() => FriendRequest)
export class FriendRequestResolverBase {
  constructor(protected readonly service: FriendRequestService) {}

  async _friendRequestsMeta(
    @graphql.Args() args: FriendRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FriendRequest])
  async friendRequests(
    @graphql.Args() args: FriendRequestFindManyArgs
  ): Promise<FriendRequest[]> {
    return this.service.friendRequests(args);
  }

  @graphql.Query(() => FriendRequest, { nullable: true })
  async friendRequest(
    @graphql.Args() args: FriendRequestFindUniqueArgs
  ): Promise<FriendRequest | null> {
    const result = await this.service.friendRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FriendRequest)
  async createFriendRequest(
    @graphql.Args() args: CreateFriendRequestArgs
  ): Promise<FriendRequest> {
    return await this.service.createFriendRequest({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FriendRequest)
  async updateFriendRequest(
    @graphql.Args() args: UpdateFriendRequestArgs
  ): Promise<FriendRequest | null> {
    try {
      return await this.service.updateFriendRequest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FriendRequest)
  async deleteFriendRequest(
    @graphql.Args() args: DeleteFriendRequestArgs
  ): Promise<FriendRequest | null> {
    try {
      return await this.service.deleteFriendRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
